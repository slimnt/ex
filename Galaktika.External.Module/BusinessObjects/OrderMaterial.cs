using System;
using DevExpress.Xpo;
using PromAktiv.Core.Module;
using PromAktiv.Core.CD.Module.ITM;
using Xafari.SmartDesign;
using System.ComponentModel;
using DevExpress.ExpressApp.Model;
using DevExpress.Persistent.Validation;

namespace Galaktika.External.Module.BusinessObjects
{
	[SmartDesignStrategy(typeof(XafariSmartDesignStrategy))]
	[CreateListView(Layout = nameof(Number) + ";" + nameof(Material) + ";" + nameof(Qty) + ";" + nameof(Price) + ";" + nameof(Sum))]
	[CreateListView(Layout = nameof(Number) + ";" + nameof(Material) + ";" + nameof(Qty) + ";" + nameof(Price) + ";" + nameof(Sum), ListViewType = ListViewType.LookupListView)]
	[CreateDetailView(Layout = nameof(Number) + ";" + nameof(Material) + ";" + nameof(Qty) + ";" + nameof(Price) + ";" + nameof(Sum))]

	[Persistent("eamOrderMaterial")]
	public class OrderMaterial : PromAktiv.Core.Module.БазоваяСущность, INumerationSpecification
	{
		public OrderMaterial(Session session) : base(session)
		{
		}

		#region BusinessLogic
		/// <summary>
		/// Класс бизнес-логики для персистентного объекта OrderMaterial
		/// </summary>
		public class Logic : LogicBase<OrderMaterial>
		{
			private CalculationLogic _сalculationLogic = new CalculationLogic();
			// Калькулятор пересчета связанных полей
			/// <summary>
			/// Gets the vat calculation logic.
			/// </summary>
			/// <value>The vat calculation logic.</value>
			/// <autogeneratedoc />
			public CalculationLogic CalculationLogic
			{
				get { return _сalculationLogic; }
			}

			/// <summary>
			/// Статический метод для получения экземпляра класса бизнес логики
			/// </summary>
			/// <returns></returns>
			public static Logic CreateInstance()
			{
				return new Logic();
			}

			public override void AfterConstruction(OrderMaterial instance)
			{
				base.AfterConstruction(instance);
			}

			public override void OnChanged(OrderMaterial instance, string propertyName, object oldValue, object newValue)
			{
				switch (propertyName)
				{
					case "Price":
						CalculationLogic.OnChanged(instance, "Price", oldValue, newValue);
						break;

					case "Qty":
						CalculationLogic.OnChanged(instance, "Qty", oldValue, newValue);
						break;
				}
			}
		}
		/// <summary>
		/// Делегат метода для получения экземпляра класса бизнес логики объекта
		/// </summary>
		/// <returns></returns>
		public delegate OrderMaterial.Logic GetOrderMaterialLogic();

		/// <summary>
		/// Переменная в которую задается метод, который отвечает за создание экземпляра класса бизнес логики
		/// </summary>
		public GetOrderMaterialLogic OrderMaterialLogicHandler = OrderMaterial.Logic.CreateInstance;

		/// <summary>
		/// Свойство для хранения экземпляра объекта бизнес логики
		/// </summary>
		private OrderMaterial.Logic m_OrderMaterialLogic;

		/// <summary>
		/// Свойство для получения экземпляра класса бизнес логики
		/// </summary>
		[Browsable(false)]
		public OrderMaterial.Logic OrderMaterialLogic
		{
			get
			{
				if (m_OrderMaterialLogic != null)
					return m_OrderMaterialLogic;
				if (m_OrderMaterialLogic == null && OrderMaterialLogicHandler != null)
					m_OrderMaterialLogic = OrderMaterialLogicHandler();
				if (m_OrderMaterialLogic == null)
					m_OrderMaterialLogic = OrderMaterial.Logic.CreateInstance();
				return m_OrderMaterialLogic;
			}
		}
		#endregion

		#region Property
		private int _number;
		/// <summary>
		/// Порядковый номер
		/// </summary>
		[RuleRequiredField(DefaultContexts.Save)]
		public int Number
		{
			get { return _number; }
			set { SetPropertyValue<int>(nameof(Number), ref _number, value); }
		}

		private decimal _qty;
		/// <summary>
		/// Количество материала, затраченное для выполнения операции
		/// </summary>
		[ModelDefault("DisplayFormat", @"{0:n2}"), ModelDefault("EditMask", "n2")]
		public decimal Qty
		{
			get { return _qty; }
			set { SetPropertyValue<decimal>(nameof(Qty), ref _qty, value); }
		}

		private decimal _sum;
		/// <summary>
		/// Стоимость материала
		/// </summary>
		[ModelDefault("DisplayFormat", "c2"), ModelDefault("EditMask", "c2")]
		public decimal Sum
		{
			get { return _sum; }
			set { SetPropertyValue<decimal>(nameof(Sum), ref _sum, value); }
		}

		private decimal _price;
		/// <summary>
		/// Цена материала
		/// </summary>
		[ModelDefault("DisplayFormat", "c2"), ModelDefault("EditMask", "c2")]
		public decimal Price
		{
			get { return _price; }
			set { SetPropertyValue<decimal>(nameof(Price), ref _price, value); }
		}

		private НоменклатурнаяПозиция _material;
		/// <summary>
		/// Материал из справочника номенклатурных позиций
		/// </summary>
		[RuleRequiredField(DefaultContexts.Save)]
		public НоменклатурнаяПозиция Material
		{
			get { return _material; }
			set { SetPropertyValue<НоменклатурнаяПозиция>(nameof(Material), ref _material, value); }
		}

		private OrderOperation _operation;
		/// <summary>
		/// ссылка на OrderOperation
		/// </summary>
		[Association]
		public OrderOperation Operation
		{
			get { return _operation; }
			set { SetPropertyValue<OrderOperation>(nameof(Operation), ref _operation, value); }
		}
		#endregion

		#region Пересчет связанных полей
		/// <summary>
		/// Пересчёт связанных полей Sum и Qty
		/// </summary>
		public class CalculationLogic : DependentFieldsLogic<OrderMaterial>
		{
			public override void Calculate(OrderMaterial instance, string propertyName, object oldValue, object newValue)
			{
				if (instance == null) return;
				switch (propertyName)
				{
					case "Price":
						instance.Sum = instance.Qty * instance.Price;
						break;
					case "Qty":
						instance.Sum = instance.Qty * instance.Price;
						break;
					case "Sum":
						break;
				}
			}
		}
		#endregion

		#region Методы класса
		protected override void OnChanged(string propertyName, object oldValue, object newValue)
		{
			base.OnChanged(propertyName, oldValue, newValue);
			OrderMaterialLogic.OnChanged(this, propertyName, oldValue, newValue);
		}
		#endregion

		#region INumerationSpecification
		public int GetNextNumber()
		{
			if (this.Operation != null)
				return NumerationSpecificationService.GetLastNumber(this.Operation.Materials);
			return 0;
		}
		#endregion
	}
}